<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseSettingsCurrentLanguage" xml:space="preserve">
    <value>Current language (will only be applied after restarting the application):</value>
  </data>
  <data name="BaseSettingsHapticalFeedback" xml:space="preserve">
    <value>Haptic feedback:</value>
  </data>
  <data name="BaseSettingsMode" xml:space="preserve">
    <value>Information perception method:</value>
  </data>
  <data name="BaseSettingsModeRead" xml:space="preserve">
    <value>Read</value>
  </data>
  <data name="BaseSettingsModeReadDescription" xml:space="preserve">
    <value>all information is displayed on the screen</value>
  </data>
  <data name="BaseSettingsModeReadOrVoice" xml:space="preserve">
    <value>ReadOrVoice</value>
  </data>
  <data name="BaseSettingsModeReadOrVoiceDescription" xml:space="preserve">
    <value>all information is displayed or spoken</value>
  </data>
  <data name="BaseSettingsModeVoice" xml:space="preserve">
    <value>Voice</value>
  </data>
  <data name="BaseSettingsModeVoiceDescription" xml:space="preserve">
    <value>all information is spoken</value>
  </data>
  <data name="ButtonApply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="ButtonBuyCoffee" xml:space="preserve">
    <value>Buy me a coffee, I'm tired :(</value>
  </data>
  <data name="ButtonCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ButtonClear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ButtonDefault" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="ButtonDonate" xml:space="preserve">
    <value>I read all messages personally :)</value>
  </data>
  <data name="ButtonDownload" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="ButtonLater" xml:space="preserve">
    <value>Later</value>
  </data>
  <data name="ButtonMoreDetails" xml:space="preserve">
    <value>more</value>
  </data>
  <data name="ButtonNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ButtonOk" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="ButtonSpeak" xml:space="preserve">
    <value>Speak</value>
  </data>
  <data name="ButtonStartStop" xml:space="preserve">
    <value>Start/Stop</value>
  </data>
  <data name="ButtonYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="CommandBattery" xml:space="preserve">
    <value>battery charge</value>
  </data>
  <data name="CommandBatteryCharging" xml:space="preserve">
    <value>Yay! Food</value>
  </data>
  <data name="CommandBatteryDescription" xml:space="preserve">
    <value>notifies you of the current battery charge</value>
  </data>
  <data name="CommandBatteryFull" xml:space="preserve">
    <value>I'm full</value>
  </data>
  <data name="CommandCall" xml:space="preserve">
    <value>call</value>
  </data>
  <data name="CommandCallContactHaveSeveralPhoneNumbers" xml:space="preserve">
    <value>{0} has several numbers which one to choose?</value>
  </data>
  <data name="CommandCallContactNotFound" xml:space="preserve">
    <value>{0} not found.</value>
  </data>
  <data name="CommandCallDescription" xml:space="preserve">
    <value>makes a call if the given user was found in your contacts list.</value>
  </data>
  <data name="CommandCallExtendedDescription" xml:space="preserve">
    <value>Makes a call if the given user was found in your contacts list. If several contacts with a given name are found, then a choice is offered and you need to answer: “zero”, “first” or “one”, etc. up to 9 inclusive, no longer supported.</value>
  </data>
  <data name="CommandCallNotPhoneNumbers" xml:space="preserve">
    <value>{0} phone number was not found.</value>
  </data>
  <data name="CommandCallSelectNumberFromList" xml:space="preserve">
    <value>Select number from the list.</value>
  </data>
  <data name="CommandDeviceInfo" xml:space="preserve">
    <value>device info</value>
  </data>
  <data name="CommandDeviceInfoDescription" xml:space="preserve">
    <value>notifies you about the phone's characteristics</value>
  </data>
  <data name="CommandDial" xml:space="preserve">
    <value>dial</value>
  </data>
  <data name="CommandDialDescription" xml:space="preserve">
    <value>dials a phone number, dialing is supported both with and without the +1 prefix. After dialing, you need to check that the number you dialed is correct and say “call.”</value>
  </data>
  <data name="CommandExceptionInCode" xml:space="preserve">
    <value>Sorry, there was an error in my code and the command couldn't be executed. Cry, cry.</value>
  </data>
  <data name="CommandFlashlight" xml:space="preserve">
    <value>flashlight</value>
  </data>
  <data name="CommandFlashlightDescription" xml:space="preserve">
    <value>turns the flashlight on/off</value>
  </data>
  <data name="CommandFlashlightExtendedDescription" xml:space="preserve">
    <value>Turns the flashlight on/off. If the flashlight was already turned on outside the application, then the first call will turn on the turned on flashlight, and the second will turn it off.</value>
  </data>
  <data name="CommandHelp" xml:space="preserve">
    <value>help</value>
  </data>
  <data name="CommandHelpDescription" xml:space="preserve">
    <value>sends out if people have been pre-selected and turns on a siren (optional) for help.</value>
  </data>
  <data name="CommandPetName" xml:space="preserve">
    <value>petty</value>
  </data>
  <data name="CommandPickFiles" xml:space="preserve">
    <value>pick files</value>
  </data>
  <data name="CommandPickFilesDescription" xml:space="preserve">
    <value>opens a list to select files</value>
  </data>
  <data name="CommandPickImages" xml:space="preserve">
    <value>pick images</value>
  </data>
  <data name="CommandPickImagesDescription" xml:space="preserve">
    <value>opens a list for selecting images</value>
  </data>
  <data name="CommandPickVideoFiles" xml:space="preserve">
    <value>pick video</value>
  </data>
  <data name="CommandPickVideoFilesDescription" xml:space="preserve">
    <value>opens a list for selecting video files</value>
  </data>
  <data name="CommandScreenshot" xml:space="preserve">
    <value>screenshot</value>
  </data>
  <data name="CommandScreenshotDescription" xml:space="preserve">
    <value>takes a screenshot.</value>
  </data>
  <data name="CommandsTitle" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="CommandsTitleUsefulFeatures" xml:space="preserve">
    <value>Useful features:</value>
  </data>
  <data name="CommandTakePhoto" xml:space="preserve">
    <value>take photo</value>
  </data>
  <data name="CommandTakePhotoDescription" xml:space="preserve">
    <value>opens a window for taking photographs</value>
  </data>
  <data name="CommandTakeVideo" xml:space="preserve">
    <value>take video</value>
  </data>
  <data name="CommandTakeVideoDescription" xml:space="preserve">
    <value>opens a window for creating a video file</value>
  </data>
  <data name="CommandWordCancel" xml:space="preserve">
    <value>cancel</value>
  </data>
  <data name="CommandWordNo" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="DeviceInfo" xml:space="preserve">
    <value>Device information</value>
  </data>
  <data name="DeviceInfoDensity" xml:space="preserve">
    <value>Density</value>
  </data>
  <data name="DeviceInfoHeight" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="DeviceInfoHertz" xml:space="preserve">
    <value>Hz</value>
  </data>
  <data name="DeviceInfoManufacturer" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="DeviceInfoModel" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="DeviceInfoOSVersion" xml:space="preserve">
    <value>Version OS</value>
  </data>
  <data name="DeviceInfoPixel" xml:space="preserve">
    <value>px</value>
  </data>
  <data name="DeviceInfoPlatform" xml:space="preserve">
    <value>Platform</value>
  </data>
  <data name="DeviceInfoRefreshRate" xml:space="preserve">
    <value>RefreshRate</value>
  </data>
  <data name="DeviceInfoWidth" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="PageAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="PageBaseSettings" xml:space="preserve">
    <value>Base settings</value>
  </data>
  <data name="PageDiagnostics" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="PageHelp" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="PageLeaderboard" xml:space="preserve">
    <value>Leaderboard</value>
  </data>
  <data name="PagePetty" xml:space="preserve">
    <value>Petty</value>
  </data>
  <data name="PageSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="PageSpeechSimulator" xml:space="preserve">
    <value>Simulator speech</value>
  </data>
  <data name="PageVoiceSettings" xml:space="preserve">
    <value>Voice</value>
  </data>
  <data name="TitleDownloading" xml:space="preserve">
    <value>Downloading</value>
  </data>
  <data name="UserMessageCheckNetworkConnection" xml:space="preserve">
    <value>Check your network connection and try again.</value>
  </data>
  <data name="UserMessageCommandNotAvailable" xml:space="preserve">
    <value>The command is not available at the moment.</value>
  </data>
  <data name="UserMessageCommandNotSupported" xml:space="preserve">
    <value>This command is not supported on this device.</value>
  </data>
  <data name="UserMessageDisablePettyGuard" xml:space="preserve">
    <value>Are you sure you want to disable Petty's protection?</value>
  </data>
  <data name="UserMessageDownloadingInProgress" xml:space="preserve">
    <value>Downloading in progress, please wait for it to complete.</value>
  </data>
  <data name="UserMessageDownloadVoskModelMessage" xml:space="preserve">
    <value>For start voice recognizing you need to download a voice model (about 128 MB)</value>
  </data>
  <data name="UserMessagePettySpeechSimulatorPlaceholder" xml:space="preserve">
    <value>People don't understand what you say, but do you think your speech is normal? 
There is a solution!!! 
Petty speech simulator will help you in this difficult task. 
Just start talking and it will show you what people hear.
Learn to speak clearly, good luck!)</value>
  </data>
  <data name="UserMessagePettyStartStopRemark" xml:space="preserve">
    <value>P.S. This button starts and stops Petty's voice assistant throughout the application.</value>
  </data>
  <data name="UserMessageTryLater" xml:space="preserve">
    <value>This operation is already in progress. Please try again later.</value>
  </data>
  <data name="VoiceSettingsEditorVoiceTestSpeech" xml:space="preserve">
    <value>Hello leather bag, how are you?</value>
  </data>
  <data name="VoiceSettingsPitch" xml:space="preserve">
    <value>Pitch</value>
  </data>
  <data name="VoiceSettingsValue" xml:space="preserve">
    <value>Value: {0}</value>
  </data>
  <data name="VoiceSettingsVolume" xml:space="preserve">
    <value>Volume</value>
  </data>
</root>